
m8.o:     file format elf32-littlearm


Disassembly of section .text:

00000000 <main>:
int main() {
   0:	b5b0      	push	{r4, r5, r7, lr}
   2:	b08c      	sub	sp, #48	@ 0x30
   4:	af00      	add	r7, sp, #0
   6:	4a1b      	ldr	r2, [pc, #108]	@ (74 <main+0x74>)
   8:	447a      	add	r2, pc
   a:	4b1b      	ldr	r3, [pc, #108]	@ (78 <main+0x78>)
   c:	58d3      	ldr	r3, [r2, r3]
   e:	681b      	ldr	r3, [r3, #0]
  10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  12:	f04f 0300 	mov.w	r3, #0
  int a[] = {1, 2, 3, 4, 5};
  16:	4b19      	ldr	r3, [pc, #100]	@ (7c <main+0x7c>)
  18:	447b      	add	r3, pc
  1a:	1d3c      	adds	r4, r7, #4
  1c:	461d      	mov	r5, r3
  1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
  22:	682b      	ldr	r3, [r5, #0]
  24:	6023      	str	r3, [r4, #0]
  int b[5];

  for (int i = 0; i < 5; i++)
  26:	2300      	movs	r3, #0
  28:	603b      	str	r3, [r7, #0]
  2a:	e00e      	b.n	4a <main+0x4a>
    b[i] = a[i];
  2c:	683b      	ldr	r3, [r7, #0]
  2e:	009b      	lsls	r3, r3, #2
  30:	3330      	adds	r3, #48	@ 0x30
  32:	443b      	add	r3, r7
  34:	f853 2c2c 	ldr.w	r2, [r3, #-44]
  38:	683b      	ldr	r3, [r7, #0]
  3a:	009b      	lsls	r3, r3, #2
  3c:	3330      	adds	r3, #48	@ 0x30
  3e:	443b      	add	r3, r7
  40:	f843 2c18 	str.w	r2, [r3, #-24]
  for (int i = 0; i < 5; i++)
  44:	683b      	ldr	r3, [r7, #0]
  46:	3301      	adds	r3, #1
  48:	603b      	str	r3, [r7, #0]
  4a:	683b      	ldr	r3, [r7, #0]
  4c:	2b04      	cmp	r3, #4
  4e:	dded      	ble.n	2c <main+0x2c>
  50:	2300      	movs	r3, #0
int main() {
  52:	490b      	ldr	r1, [pc, #44]	@ (80 <main+0x80>)
  54:	4479      	add	r1, pc
}
  56:	4a08      	ldr	r2, [pc, #32]	@ (78 <main+0x78>)
  58:	588a      	ldr	r2, [r1, r2]
  5a:	6811      	ldr	r1, [r2, #0]
  5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
  5e:	4051      	eors	r1, r2
  60:	f04f 0200 	mov.w	r2, #0
  64:	d001      	beq.n	6a <main+0x6a>
  66:	f7ff fffe 	bl	0 <__stack_chk_fail>
  6a:	4618      	mov	r0, r3
  6c:	3730      	adds	r7, #48	@ 0x30
  6e:	46bd      	mov	sp, r7
  70:	bdb0      	pop	{r4, r5, r7, pc}
  72:	bf00      	nop
  74:	00000068 	.word	0x00000068
  78:	00000000 	.word	0x00000000
  7c:	00000060 	.word	0x00000060
  80:	00000028 	.word	0x00000028
